options:
  logging: CLOUD_LOGGING_ONLY

steps:
  # Create a Cloud Storage bucket for uploads if it doesn't exist
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: bash
    args:
      - '-c'
      - |
        gsutil ls -b gs://baic-uploads || gsutil mb -l us-central1 gs://baic-uploads
        gsutil iam ch allUsers:objectViewer gs://baic-uploads

  # Check if VM exists, create if it doesn't
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: bash
    args:
      - '-c'
      - |
        # VM configuration
        # Hard-code zone to avoid substitution issues
        
        # Check if VM exists
        echo "Checking if VM baic-backend-vm exists..."
        if gcloud compute instances describe baic-backend-vm --zone=us-central1-a &>/dev/null; then
          echo "VM baic-backend-vm exists."
        else
          echo "VM baic-backend-vm does not exist. Creating VM..."
          gcloud compute instances create baic-backend-vm \
            --zone=us-central1-a \
            --machine-type=e2-standard-2 \
            --boot-disk-size=20GB \
            --image-family=debian-11 \
            --image-project=debian-cloud \
            --tags=http-server,https-server
          
          # Wait for VM to be ready
          echo "Waiting for VM to be ready..."
          sleep 60
        fi

  # Set up SSH for Cloud Build
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: bash
    args:
      - '-c'
      - |
        # Set up SSH for Cloud Build
        mkdir -p /root/.ssh
        ssh-keygen -t rsa -f /root/.ssh/google_compute_engine -N "" -q
        
        # Add the SSH key to the VM's metadata
        gcloud compute instances add-metadata baic-backend-vm --zone=us-central1-a --metadata="ssh-keys=cloudbuild:$(cat /root/.ssh/google_compute_engine.pub)"
        
        # Configure SSH to not check host keys
        cat > /root/.ssh/config << EOF
        Host *
          StrictHostKeyChecking no
          UserKnownHostsFile /dev/null
        EOF
        chmod 600 /root/.ssh/config
        
        # Wait for SSH key propagation
        sleep 30

  # Create VM setup script
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: bash
    args:
      - '-c'
      - |
        # Create VM setup script in current directory
        cat > vm-setup.sh << 'EOF'
        #!/bin/bash
        # VM setup script for BAIC Global application
        
        # Update package lists
        sudo apt-get update
        
        # Install required packages
        sudo apt-get install -y nginx nodejs npm mariadb-server
        
        # Install PM2 globally
        sudo npm install -g pm2
        
        # Configure Nginx
        sudo bash -c 'cat > /etc/nginx/nginx.conf << EOF
        user www-data;
        worker_processes auto;
        pid /run/nginx.pid;
        include /etc/nginx/modules-enabled/*.conf;
        
        events {
            worker_connections 768;
        }
        
        http {
            sendfile on;
            tcp_nopush on;
            tcp_nodelay on;
            keepalive_timeout 65;
            types_hash_max_size 2048;
        
            include /etc/nginx/mime.types;
            default_type application/octet-stream;
        
            ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
            ssl_prefer_server_ciphers on;
        
            access_log /var/log/nginx/access.log;
            error_log /var/log/nginx/error.log;
        
            gzip on;
        
            include /etc/nginx/conf.d/*.conf;
            include /etc/nginx/sites-enabled/*;
        }
        EOF'
        
        # Create directories for applications
        sudo mkdir -p /var/www/frontend
        sudo mkdir -p /var/www/admin
        sudo mkdir -p /opt/baic/uploads
        sudo mkdir -p /opt/baic/logs
        
        # Set proper permissions
        sudo chown -R www-data:www-data /var/www
        sudo chmod -R 755 /var/www
        sudo chown -R www-data:www-data /opt/baic
        sudo chmod -R 755 /opt/baic
        
        # Enable and start Nginx
        sudo systemctl enable nginx
        sudo systemctl start nginx
        
        # Enable and start MariaDB
        sudo systemctl enable mariadb
        sudo systemctl start mariadb
        
        # Database and user already exist, no need to create or import
        
        # Configure firewall to allow HTTP and HTTPS traffic
        sudo apt-get install -y ufw
        sudo ufw allow 22/tcp
        sudo ufw allow 80/tcp
        sudo ufw allow 443/tcp
        sudo ufw allow 8080/tcp
        sudo ufw --force enable
        
        echo "VM setup completed successfully!"
        EOF
        chmod +x vm-setup.sh

  # Copy and run VM setup script
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: bash
    args:
      - '-c'
      - |
        # Copy VM setup script to VM
        gcloud compute scp vm-setup.sh cloudbuild@baic-backend-vm:/tmp/vm-setup.sh --zone=us-central1-a
        
        # Run VM setup script
        gcloud compute ssh cloudbuild@baic-backend-vm --zone=us-central1-a --command="chmod +x /tmp/vm-setup.sh && /tmp/vm-setup.sh"

  # Copy uploads directory to Cloud Storage
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: bash
    args:
      - '-c'
      - |
        if [ -d "./uploadPath" ]; then
          gsutil -m cp -r ./uploadPath/* gs://baic-uploads/
          echo "Uploads directory copied to Cloud Storage from ./uploadPath"
        elif [ -d "./beiqi-service-master/beiqi-service-master/uploadPath" ]; then
          gsutil -m cp -r ./beiqi-service-master/beiqi-service-master/uploadPath/* gs://baic-uploads/
          echo "Uploads directory copied to Cloud Storage from ./beiqi-service-master/beiqi-service-master/uploadPath"
        else
          echo "Uploads directory not found, skipping copy"
        fi

  # Update configuration files
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: bash
    args:
      - '-c'
      - |
        cd beiqi-service-master/beiqi-service-master
        
        # Update the database connection in application-prod.yml for admin to use local database
        sed -i 's|jdbc:mysql:///ruoyi?cloudSqlInstance=.*&useSSL=false|jdbc:mysql://127.0.0.1:3306/baicintl?useUnicode=true\&characterEncoding=utf8\&zeroDateTimeBehavior=convertToNull\&useSSL=false\&serverTimezone=GMT%2B8|g' ruoyi-admin/src/main/resources/application-prod.yml
        
        # Update the file upload path to use Cloud Storage for admin
        if grep -q "profile:" ruoyi-admin/src/main/resources/application-prod.yml; then
          sed -i 's|profile:.*|profile: /opt/baic/uploads|g' ruoyi-admin/src/main/resources/application-prod.yml
        else
          echo "ruoyi:" >> ruoyi-admin/src/main/resources/application-prod.yml
          echo "  profile: /opt/baic/uploads" >> ruoyi-admin/src/main/resources/application-prod.yml
        fi
        
        if grep -q "local-storage-path:" ruoyi-admin/src/main/resources/application-prod.yml; then
          sed -i 's|local-storage-path:.*|local-storage-path: /opt/baic/uploads|g' ruoyi-admin/src/main/resources/application-prod.yml
        else
          echo "ufo:" >> ruoyi-admin/src/main/resources/application-prod.yml
          echo "  local-storage-path: /opt/baic/uploads" >> ruoyi-admin/src/main/resources/application-prod.yml
        fi
        
        # Update the database connection in application-prod.yml for web to use local database
        sed -i 's|jdbc:mysql:///ruoyi?cloudSqlInstance=.*&useSSL=false|jdbc:mysql://127.0.0.1:3306/baicintl?useUnicode=true\&characterEncoding=utf8\&zeroDateTimeBehavior=convertToNull\&useSSL=false\&serverTimezone=GMT%2B8|g' ruoyi-web/src/main/resources/application-prod.yml
        
        # Update the file upload path to use Cloud Storage for web
        if grep -q "profile:" ruoyi-web/src/main/resources/application-prod.yml; then
          sed -i 's|profile:.*|profile: /opt/baic/uploads|g' ruoyi-web/src/main/resources/application-prod.yml
        else
          echo "ruoyi:" >> ruoyi-web/src/main/resources/application-prod.yml
          echo "  profile: /opt/baic/uploads" >> ruoyi-web/src/main/resources/application-prod.yml
        fi
        
        if grep -q "local-storage-path:" ruoyi-web/src/main/resources/application-prod.yml; then
          sed -i 's|local-storage-path:.*|local-storage-path: /opt/baic/uploads|g' ruoyi-web/src/main/resources/application-prod.yml
        else
          echo "ufo:" >> ruoyi-web/src/main/resources/application-prod.yml
          echo "  local-storage-path: /opt/baic/uploads" >> ruoyi-web/src/main/resources/application-prod.yml
        fi

  # Build the Java projects with Maven
  - name: 'maven:3.8-openjdk-8'
    entrypoint: bash
    args:
      - '-c'
      - |
        cd beiqi-service-master/beiqi-service-master
        # Build both modules
        mvn clean package -DskipTests

  # Make the deployment script executable and set up SSH
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: bash
    args:
      - '-c'
      - |
        chmod +x vm-deploy-updated.sh
        
        # Set up SSH for Cloud Build
        mkdir -p /root/.ssh
        ssh-keygen -t rsa -f /root/.ssh/google_compute_engine -N "" -q
        
        # Add the SSH key to the VM's metadata with proper username format - NO VARIABLES
        gcloud compute instances add-metadata baic-backend-vm --zone=us-central1-a --metadata="ssh-keys=cloudbuild:$(cat /root/.ssh/google_compute_engine.pub)"
        
        # Configure SSH to not check host keys
        cat > /root/.ssh/config << EOF
        Host *
          StrictHostKeyChecking no
          UserKnownHostsFile /dev/null
        EOF
        chmod 600 /root/.ssh/config
        
        # Wait for SSH key propagation
        sleep 30
  
  # Deploy to VM with increased timeout
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: bash
    args:
      - '-c'
      - |
        # Make the fixed deployment script executable
        chmod +x vm-deploy-fixed.sh
        
        # Run fixed deployment script with database connection fix
        ./vm-deploy-fixed.sh
    timeout: 1800s  # 30 minutes

timeout: 7200s  # 2 hours
