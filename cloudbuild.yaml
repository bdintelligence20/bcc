options:
  logging: CLOUD_LOGGING_ONLY

steps:
  # Create a Cloud Storage bucket for uploads if it doesn't exist
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: bash
    args:
      - '-c'
      - |
        gsutil ls -b gs://baic-uploads || gsutil mb -l us-central1 gs://baic-uploads
        gsutil iam ch allUsers:objectViewer gs://baic-uploads

  # Copy uploads directory to Cloud Storage
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: bash
    args:
      - '-c'
      - |
        if [ -d "./uploadPath" ]; then
          gsutil -m cp -r ./uploadPath/* gs://baic-uploads/
          echo "Uploads directory copied to Cloud Storage from ./uploadPath"
        elif [ -d "./beiqi-service-master/beiqi-service-master/uploadPath" ]; then
          gsutil -m cp -r ./beiqi-service-master/beiqi-service-master/uploadPath/* gs://baic-uploads/
          echo "Uploads directory copied to Cloud Storage from ./beiqi-service-master/beiqi-service-master/uploadPath"
        else
          echo "Uploads directory not found, skipping copy"
        fi

  # Build and deploy GeoIP service to Cloud Run
  # First, update the app.js file to use the PORT environment variable
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: bash
    args:
      - '-c'
      - |
        cd beiqi-geoip/beiqi-geoip
        # Update the port to use the PORT environment variable
        sed -i 's/const port = 3000;/const port = process.env.PORT || 3000;  \/\/ Use PORT environment variable for Cloud Run or default to 3000 for local development/g' app.js
        
  # Build and deploy the updated GeoIP service
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/$PROJECT_ID/beiqi-geoip', './beiqi-geoip/beiqi-geoip']
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/beiqi-geoip']
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args: ['run', 'deploy', 'beiqi-geoip', '--image', 'gcr.io/$PROJECT_ID/beiqi-geoip', '--region', 'us-central1', '--platform', 'managed', '--allow-unauthenticated']

  # Deploy Frontend to App Engine
  - name: 'node:20'
    entrypoint: bash
    args:
      - '-c'
      - |
        cd beiqi-home-master/beiqi-home-master
        # Create index.scss if it doesn't exist
        if [ ! -f "assets/scss/index.scss" ]; then
          echo "// Import all SCSS files" > assets/scss/index.scss
          echo "@import 'variables';" >> assets/scss/index.scss
          echo "@import 'mixins';" >> assets/scss/index.scss
          echo "@import 'base';" >> assets/scss/index.scss
          echo "@import 'layout';" >> assets/scss/index.scss
          echo "@import 'global';" >> assets/scss/index.scss
          echo "@import 'main';" >> assets/scss/index.scss
          echo "@import 'element-variables';" >> assets/scss/index.scss
          echo "@import 'fonts';" >> assets/scss/index.scss
        fi
        # Install dependencies including the newly added ones
        npm install
        npm install --save @nuxtjs/composition-api@0.33.1
        npm install --save file-loader
        npm install --save @intlify/vue-i18n-loader@1.1.0
        npm run build
        
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: bash
    args:
      - '-c'
      - |
        cd beiqi-home-master/beiqi-home-master
        gcloud app deploy app.yaml --quiet

  # Deploy Backend Admin to App Engine
  # First, update configuration files
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: bash
    args:
      - '-c'
      - |
        cd beiqi-service-master/beiqi-service-master
        # Update the database connection in application-prod.yml
        sed -i 's|jdbc:mysql:///ruoyi?cloudSqlInstance=.*&useSSL=false|jdbc:mysql:///ruoyi?cloudSqlInstance=baic-457613:us-central1:baic-mysql\&socketFactory=com.google.cloud.sql.mysql.SocketFactory\&user=ruoyi\&password=Stellies21!@\&useSSL=false|g' ruoyi-admin/src/main/resources/application-prod.yml
        
        # Update the file upload path to use Cloud Storage
        if grep -q "profile:" ruoyi-admin/src/main/resources/application-prod.yml; then
          sed -i 's|profile:.*|profile: /uploads|g' ruoyi-admin/src/main/resources/application-prod.yml
        else
          echo "ruoyi:" >> ruoyi-admin/src/main/resources/application-prod.yml
          echo "  profile: /uploads" >> ruoyi-admin/src/main/resources/application-prod.yml
        fi
        
        if grep -q "local-storage-path:" ruoyi-admin/src/main/resources/application-prod.yml; then
          sed -i 's|local-storage-path:.*|local-storage-path: /uploads|g' ruoyi-admin/src/main/resources/application-prod.yml
        else
          echo "ufo:" >> ruoyi-admin/src/main/resources/application-prod.yml
          echo "  local-storage-path: /uploads" >> ruoyi-admin/src/main/resources/application-prod.yml
        fi
  
  # Build the Java project with Maven
  - name: 'maven:3.8-eclipse-temurin-21'
    entrypoint: bash
    args:
      - '-c'
      - |
        cd beiqi-service-master/beiqi-service-master
        # Build the project from the root directory to ensure parent POM is found
        mvn clean package -DskipTests
  
  # Deploy the built application
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: bash
    args:
      - '-c'
      - |
        cd beiqi-service-master/beiqi-service-master/ruoyi-admin
        gcloud app deploy app.yaml --quiet

  # Deploy Backend Web to App Engine
  # First, update configuration files
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: bash
    args:
      - '-c'
      - |
        cd beiqi-service-master/beiqi-service-master
        # Update the database connection in application-prod.yml
        sed -i 's|jdbc:mysql:///ruoyi?cloudSqlInstance=.*&useSSL=false|jdbc:mysql:///ruoyi?cloudSqlInstance=baic-457613:us-central1:baic-mysql\&socketFactory=com.google.cloud.sql.mysql.SocketFactory\&user=ruoyi\&password=Stellies21!@\&useSSL=false|g' ruoyi-web/src/main/resources/application-prod.yml
        
        # Update the file upload path to use Cloud Storage
        if grep -q "profile:" ruoyi-web/src/main/resources/application-prod.yml; then
          sed -i 's|profile:.*|profile: /uploads|g' ruoyi-web/src/main/resources/application-prod.yml
        else
          echo "ruoyi:" >> ruoyi-web/src/main/resources/application-prod.yml
          echo "  profile: /uploads" >> ruoyi-web/src/main/resources/application-prod.yml
        fi
        
        if grep -q "local-storage-path:" ruoyi-web/src/main/resources/application-prod.yml; then
          sed -i 's|local-storage-path:.*|local-storage-path: /uploads|g' ruoyi-web/src/main/resources/application-prod.yml
        else
          echo "ufo:" >> ruoyi-web/src/main/resources/application-prod.yml
          echo "  local-storage-path: /uploads" >> ruoyi-web/src/main/resources/application-prod.yml
        fi
  
  # Deploy the built application (already built in the previous Maven step)
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: bash
    args:
      - '-c'
      - |
        cd beiqi-service-master/beiqi-service-master/ruoyi-web
        gcloud app deploy app.yaml --quiet

  # Deploy Admin Panel to App Engine
  - name: 'node:20'
    entrypoint: bash
    args:
      - '-c'
      - |
        cd beiqi-web-master/beiqi-web-master
        npm install
        npm run build:prod
        
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: bash
    args:
      - '-c'
      - |
        cd beiqi-web-master/beiqi-web-master
        gcloud app deploy app.yaml --quiet

images:
  - 'gcr.io/$PROJECT_ID/beiqi-geoip'

timeout: 3600s
